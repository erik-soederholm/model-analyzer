from pyDatalog import pyDatalog
from mana.warnings_and_exceptions import *

pyDatalog.create_terms('instance', 'instance_id', 'no_condition')

# Add all Attributes as variables:

{% for subsystem in subsystems %}
# Subsystem: {{subsystem.name.subsys_name}}

{% for class in subsystem.classes %}
# Class: {{code_name(class.name)}}
{% macro a_num(_calss=class)%}
A{{ _calss.cnum }}_
{%- endmacro %}
{% macro var_attr_as_text()%}
{% for attribute in class.attributes %}
'{{ a_num() }}{{ code_name(attribute.name) }}'{{ ",\n" if not loop.last }}
{%- endfor %} 
{%- endmacro %}
pyDatalog.create_terms({{ var_attr_as_text()|indent(23)}})
{% endfor %}
{% endfor %}

+no_condition() #Adding no_condition as a valid 'True' awser..

{% for subsystem in subsystems %}
# Subsystem: {{subsystem.name.subsys_name}}

{% for class in subsystem.classes %}
{% macro a_num(_calss=class)%}
A{{ _calss.cnum }}_
{%- endmacro %}
{% macro var_attr_as_text()%}
{% for attribute in class.attributes %}
'{{ a_num() }}{{ code_name(attribute.name) }}'{{ ",\n" if not loop.last }}
{%- endfor %} 
{%- endmacro %}
{% macro attr_table(spacer='')%}
{% for attribute in class.attributes %}
'{{ attribute.name }}' : {{ spacer }}{{ a_num() }}{{ code_name(attribute.name) }}{{ spacer }}{{ ",\n" if not loop.last }}
{%- endfor %} 
{%- endmacro %}
{% macro ref_table_map(data)%}
{% for source_attribute in data.ref_attributes %}
{% set ref_attribute = data.ref_map[source_attribute] %}
{% set formalizing_class = data.formalizing_class %}
{% set source_attribute_var = a_num() + code_name(source_attribute) %}
{% set ref_attribute_var = a_num(formalizing_class) + code_name(ref_attribute) %}
('{{ source_attribute_var }}', {{ ref_attribute_var }}){{ ",\n" if not loop.last else "," if data.ref_attributes|length == 1 }}
{%- endfor %}
{%- endmacro %}
{% macro ref_table(rnum)%}
{% set table_data = referential(class).inclusion[rnum] %}
{% set has_variants = table_data.has_variants %}
{% if has_variants %}
{% set key_list = table_data.variant_keys %}
{% set variant = table_data.variant %}
{{"{"}}{% for key in table_data.variant_keys %}
{{ " " if not loop.first }}'{{ key }}' :
 ({{ ref_table_map(table_data.variant[key])|indent(2) }}){{ ",\n" if not loop.last }}
{%- endfor %}}
{%- else %}
({{ ref_table_map(referential(class).inclusion[rnum].data)|indent(1) }})
{%- endif %}
{%- endmacro %}
{% macro instance()%}
instance('{{ domain }}',
         '{{ class.name }}',
{% for attribute in class.attributes %}
          {{ a_num() }}{{ code_name(attribute.name)}}{{ ")" if loop.last else ",\n" }}
{%- endfor %}
{%- endmacro %}
{% macro dummy_instance()%}
instance('{{ domain }}',
         '{{ class.name }}',
{% for attribute in class.attributes %}
          ''{{ ")" if loop.last else ",\n" }}
{%- endfor %}
{%- endmacro %}
{% macro instance_id(at_id)%}
instance_id('{{ domain }}',
            '{{ class.name }}',
            '{{ at_id }}',
{% for attribute in id(class).inclusion[at_id] %}
             {{ a_num() }}{{ code_name(attribute)}}{{ ")" if loop.last else ",\n"}}
{%- endfor %}
{%- endmacro %}
{% macro id2num(at_id)%}
{{{'I': '1', 'I2' : '2', 'I3' : '3'}[at_id]}}
{%- endmacro %}
{% macro id_exists(operator)%}
{% for at_id in id(class).defined %}
{{ code_name(class.name) }}.id{{ id2num(at_id) }}_exists(constraint){{ "\n" + operator + " " if not loop.last}}
{%- endfor %}
{%- endmacro %}
class {{ code_name(class.name) }}:
    # rules for {{class.name}}...

    instance_predicate = (
        lambda : {{ instance()|indent(17) }})


    {% for at_id in id(class).defined %}
    # rule for id: {{at_id}}
    id{{ id2num(at_id) }}_predicate = (
        lambda : {{ instance_id(at_id)|indent(20) }})

    (id{{ id2num(at_id) }}_predicate() <= instance_predicate())

    {% endfor %}

    attr_table = {{'{'}}{{ attr_table()|indent(18) }}}

    value_table = {{'{'}}{{ attr_table("'")|indent(18) }}}

    {% for rnum in referential(class).defined %}
    {{ rnum }}_ref_table = {{ ref_table(rnum)|indent(20) }}

    {% endfor %}
    # Somehow datalog needs some exeriance before it works =( 
    dummy = ({{ dummy_instance()|indent(13) }})
    +dummy
    -dummy

    @classmethod    
    def constraint(cls, input):
        result = no_condition()
        for key, value in input.items():
            result &= (cls.attr_table[key] == value)
        return result

    {% for rnum in referential(class).defined %}
    @classmethod
    {% set has_variants = referential(class).inclusion[rnum].has_variants %}
    def {{ rnum }}(cls, constraint{{ ", key" if has_variants}}):
        input = constraint._variables()
        result = no_condition()
        for attr_source, attr_ref in cls.{{ rnum }}_ref_table{{ "[key]" if has_variants}}:
            value = input[attr_source]
            if len(value) != 1:
                raise ManaException()
            result &= (attr_ref == value.data[0])
        return result

    {% endfor %}
    @staticmethod
    def rank(head, constraint):
        head_var = set(head._variables().keys())
        constraint_var = set(constraint._variables().keys())
        if not head_var.issubset(constraint_var):
            raise ManaException()

    @classmethod
    def new(cls, constraint):
    
        if {{ code_name(class.name) }}.any_id(constraint):
            raise ManaException()

        head = cls.instance_predicate()
        cls.rank(head, constraint)
        (head <= constraint)

        if not {{ code_name(class.name) }}.all_id(constraint):
            raise ManaException()

        return (head & constraint)

    @classmethod
    def value(cls, constraint, attribute):
        output_list = constraint._variables()[cls.value_table[attribute]].data
        if len(output_list) != 1:
            raise ManaException()
        return output_list[0]

    @classmethod
    def query(cls, constraint):
        head = cls.instance_predicate()
        my_query = (head & constraint)
        variables =[globals()[var] for var in my_query._variables().keys()]
        def to_constraint(instace):
            result = no_condition()
            for var, value in zip(variables, instace):
                result &= (var == value)
            return result
        return [to_constraint(instace) for instace in my_query.data]

    @classmethod
    def all(cls):
        return cls.query(no_condition())

    {% for at_id in id(class).defined %}
    @classmethod
    def id{{ id2num(at_id) }}_exists(cls, constraint):
        head = cls.id{{ id2num(at_id) }}_predicate()
        cls.rank(head, constraint)
        number_of_answers = _len(head & constraint)
        if number_of_answers > 1:
            raise ManaException()
        return (number_of_answers == 1)

    {% endfor %}
    @staticmethod
    def all_id(constraint):
        return ({{ id_exists('&')|indent(14) }})

    @staticmethod
    def any_id(constraint):
        return ({{ id_exists('|')|indent(14) }})

{% endfor %}
{% endfor %}