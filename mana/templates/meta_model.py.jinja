from __future__ import annotations
from typing import Union, Callable, Any, TypeVar
from mana.warnings_and_exceptions import *

{% for subsystem in subsystems %}
# Subsystem: {{subsystem.name.subsys_name}}

{% for class in subsystem.classes %}
{% macro ref_table_map(data)%}
{% for source_attribute in data.ref_attributes %}
{% set ref_attribute = data.ref_map[source_attribute] %}
('{{ source_attribute }}', '{{ ref_attribute }}'){{ ",\n" if not loop.last else "," if data.ref_attributes|length == 1 }}
{%- endfor %}
{%- endmacro %}
{% macro ref_table(rnum)%}
{% set table_data = referential(class).inclusion[rnum] %}
{% if table_data.has_variants %}
{{"{"}}{% for key in table_data.variant_keys %}
{{ " " if not loop.first }}'{{ key }}' :
 ({{ ref_table_map(table_data.variant[key])|indent(2) }}){{ ",\n" if not loop.last }}
{%- endfor %}}
{%- else %}
({{ ref_table_map(table_data.data)|indent(1) }})
{%- endif %}
{%- endmacro %}
{% macro ref_class(rnum)%}
{% set table_data = referential(class).inclusion[rnum] %}
{% if table_data.has_variants %}
: dict[str, Constructor[Output.{{ code_name(class.name) }}.{{ rnum }}]] = {
{% for key in table_data.variant_keys %}
'{{ key }}' : {{ code_name(table_data.variant[key].formalizing_class.name) }}.constraint{{ ",\n" if not loop.last }}
{%- endfor %}}
{%- else %}
 = {{ code_name(table_data.data.formalizing_class.name) }}.constraint
{%- endif %}
{%- endmacro %}
{% macro attibute_list()%}
{% for attribute in class.attributes %}
'{{ attribute.name }}'{{ ",\n" if not loop.last }}
{%- endfor %}
{%- endmacro %}
{% macro id_list(at_id)%}
{% for attribute in id(class).inclusion[at_id] %}
'{{ attribute }}'{{ ",\n" if not loop.last }}
{%- endfor %}
{%- endmacro %}
{% macro key_table_list()%}
{% for at_id in id(class).defined %}
(id{{ id2num(at_id) }}_list, data_table{{ id2num(at_id) }}),{{ "\n" if not loop.last }}
{%- endfor %}
{%- endmacro %}
{% macro id2num(at_id)%}
{{{'I': '1', 'I2' : '2', 'I3' : '3'}[at_id]}}
{%- endmacro %}
class {{ code_name(class.name) }}:
    # rules for {{class.name}}...

    attr_list = [{{ attibute_list()|indent(17) }}]

    {% for at_id in id(class).defined %}
    data_table{{ id2num(at_id) }}: dict[tuple, {{ code_name(class.name) }}.constraint] = dict()
    {% endfor %}

    {% for at_id in id(class).defined %}
    id{{ id2num(at_id) }}_list = [{{ id_list(at_id)|indent(16) }}]
    {% endfor %}

    key_table_list = ({{ key_table_list()|indent(22) }})

    class constraint:
        def __init__(self, input : dict):
            if not set(input.keys()).issubset(set({{ code_name(class.name) }}.attr_list)):
                raise ManaException()
            self.data = input
        
        def try_key(self, id_list : list) -> tuple | None:
            if set(id_list).issubset(set(self.data.keys())):
                return tuple(self.data[attr] for attr in id_list)
            else:
                return None
        
        def to_key(self, id_list : list) -> tuple:
            return_value = self.try_key(id_list)
            if return_value is None:
                raise ManaException()
            return return_value
        
        def is_value_subset(self, other_c : {{ code_name(class.name) }}.constraint) -> bool:
            for key, value in self.data.items():
                if value != other_c.data[key]:
                    return False
            return True
        
        def __and__(self, other_c : {{ code_name(class.name) }}.constraint):
            if type(other_c) is not {{ code_name(class.name) }}.constraint:
                raise ManaException() # bad otherwise!
            for key in set(self.data.keys()) & set(other_c.data.keys()):
                if self.data[key] != other_c.data[key]:
                    raise ManaException() # only ok if values is the same!
            return {{ code_name(class.name) }}.constraint(self.data | other_c.data)        
        
        def __getitem__(self, key):
            return self.data[key]

    {% for rnum in referential(class).defined %}
    @classmethod
    {% set has_variants = referential(class).inclusion[rnum].has_variants %}
    def {{ rnum }}(cls, constraint: {{ code_name(class.name) }}.constraint{{ ", key : str" if has_variants}}) -> Output.{{ code_name(class.name) }}.{{ rnum }}:
        ref_table = {{ ref_table(rnum)|indent(24) }}

        ref_class{{ ref_class(rnum)|indent(12) }}

        result_dict = {attr_ref : constraint[attr_source]
                for attr_source, attr_ref in ref_table{{ "[key]" if has_variants}}}
        return ref_class{{ "[key]" if has_variants}}(result_dict)

    {% endfor %}
    @classmethod
    def new(cls, constraint : {{ code_name(class.name) }}.constraint):
        
        # Check that constraint is containg all attributes for the class
        if set(constraint.data.keys()) != set(cls.attr_list):
            raise ManaException()
    
        # Check that no duplicate exists for any id (I, I2, I3)
        if cls.any_id(constraint):
            raise ManaException()
        
        # Add instance
        for id_list, table in cls.key_table_list:
            table[constraint.to_key(id_list)] = constraint

        return constraint
    
    @classmethod
    def value(cls, constraint: {{ code_name(class.name) }}.constraint, attribute: str) -> Any:
        return constraint[attribute]

    @classmethod
    def query(cls, constraint: {{ code_name(class.name) }}.constraint):

        for id_list, table in cls.key_table_list:
            key = constraint.try_key(id_list)
            if key is not None:
                # if there is an valid key => either the item exists or not
                return [table[key]] if key in table else []

        output = []
        for candidate in cls.data_table1.values():
            if constraint.is_value_subset(candidate):
                output.append(candidate)
        return output 

    @classmethod
    def all(cls):
        return list(cls.data_table1.values())

    @classmethod
    def op_id(cls, op: Callable[[list[bool]], bool], constraint: {{ code_name(class.name) }}.constraint) -> bool:
        return op([constraint.to_key(id_list) in table 
                   for id_list, table in cls.key_table_list])

    @classmethod
    def all_id(cls, constraint : {{ code_name(class.name) }}.constraint) -> bool:
        return cls.op_id(all, constraint)
    
    @classmethod
    def any_id(cls, constraint : {{ code_name(class.name) }}.constraint) -> bool:
        return cls.op_id(any, constraint)

{% endfor %}

{% endfor %}

# Typing information

T = TypeVar('T')
Constructor = Callable[[dict[str,Any]], T]

class Output:
{% for subsystem in subsystems %}
    # Subsystem: {{subsystem.name.subsys_name}}
{% for class in subsystem.classes %}
{% macro output_type(rnum)%}
{% set table_data = referential(class).inclusion[rnum] %}
{% if table_data.has_variants %}
{{"Union["}}
{% for key in table_data.variant_keys %}
{{ code_name(table_data.variant[key].formalizing_class.name) }}.constraint{{ ",\n" if not loop.last }}
{%- endfor %}]
{%- else %}
Union[{{ code_name(table_data.data.formalizing_class.name) }}.constraint]
{%- endif %}
{%- endmacro %}
{% for rnum in referential(class).defined %}
{% if loop.first %}
    class {{ code_name(class.name) }}:
{% endif %}
        {{ rnum }} = {{ output_type(rnum)|indent(12) }}
{% endfor %}
{% endfor %}
{% endfor %}
